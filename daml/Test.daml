module Test where

import Daml.Script
import Employees
import PartiesSetUp


-- Happy path
-- Test negotiation of salary between an applicant and the employer.
test_setSalary: Script ()
test_setSalary = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    -- first employer offer
    application <- submit employer do
        exerciseCmd application MakeAnOffer with salary=100.0

    -- counter offer by the applicant
    application <- submit applicant do
        exerciseCmd application CounterOfferApplicant with salary=120.00

    -- second employer offer
    application <- submit employer do
        exerciseCmd application MakeAnOffer with salary=110.0

    -- applicant accepts the last offer
    application <- submit applicant do
        exerciseCmd application AcceptOfferApplicant

    -- employer hires the applicant by creating an employee account
    employeeAccount <- submit employer do
        exerciseCmd application ReviewApplication

    return ()

-- Auxilary function to review vacation request.
-- If there is more than 1 employees available then the
-- vacation request is accepted. If there are no employees, then it returns none
reviewVacationRequest: Party -> EmployeeAccountId -> Script (Optional EmployeeAccountId)
reviewVacationRequest employer accountId = do

    availableEmployees <- queryFilter @EmployeeAccount employer (\ eAccount -> not (eAccount.onVacation))
    let numAvailableEmployees = length availableEmployees

    if (numAvailableEmployees == 0) then return None
    else do
        if (numAvailableEmployees > 1) then do 
            debug $ "Request for vacations accepted"
            accountId <- submit employer do
                exerciseCmd accountId AcceptVacationRequest
            return (Some accountId)
        else do 
            debug $ "Request for vacations denied"
            accountId <- submit employer do
                exerciseCmd accountId RejectVacationRequest
            return (Some accountId)

-- Happy path
-- test request for vacation by employee denied
test_requestVacationDenied: Script ()
test_requestVacationDenied = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    oldEmployeeAccount <- submit oldEmployee_1 do
        exerciseCmd oldEmployeeAccount RequestVacation

    oldEmployeeAccount <- reviewVacationRequest employer oldEmployeeAccount

    return ()

-- Happy path
-- test request for vacation by employee accepted
test_requestVacationAccepted: Script ()
test_requestVacationAccepted = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount_1 <- setupEmployeeAccount_1 oldEmployee_1 employer
    oldEmployeeAccount_2 <- setupEmployeeAccount_2 oldEmployee_2 employer

    oldEmployeeAccount_1 <- submit oldEmployee_1 do
        exerciseCmd oldEmployeeAccount_1 RequestVacation

    oldEmployeeAccount <- reviewVacationRequest employer oldEmployeeAccount_1

    return ()

-- Happy path
-- test firing an employee
test_multipleEmployees: Script ()
test_multipleEmployees = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    services <- submit employer do
        createCmd EmployerServices with
            employer = employer

    submit employer do 
        exerciseCmd services FireEmployee with employee=oldEmployee_1

    return ()

-- Unhappy path
-- Test negotiation of salary between an applicant and the employer.
-- Employer tries to review application before applicant is ready
test_earlyReviewSalary: Script ()
test_earlyReviewSalary = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    -- first employer offer
    application <- submit employer do
        exerciseCmd application MakeAnOffer with salary=100.0

    -- ReviewApplication must happen after AcceptOfferApplicant
    employeeAccount <- submitMustFail employer do
        exerciseCmd application ReviewApplication

    return ()


-- Unhappy path
-- test denied vacation request when no employee request
test_deniedVacationNoRequest: Script ()
test_deniedVacationNoRequest = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount_1 <- setupEmployeeAccount_1 oldEmployee_1 employer
    oldEmployeeAccount_2 <- setupEmployeeAccount_2 oldEmployee_2 employer

    oldEmployeeAccount_1 <- submitMustFail employer do
        exerciseCmd oldEmployeeAccount_1 RejectVacationRequest

    return ()


-- Unhappy path
-- test accept vacation request when no employee request
test_acceptVacationNoRequest: Script ()
test_acceptVacationNoRequest = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount_1 <- setupEmployeeAccount_1 oldEmployee_1 employer
    oldEmployeeAccount_2 <- setupEmployeeAccount_2 oldEmployee_2 employer

    oldEmployeeAccount_1 <- submitMustFail employer do
        exerciseCmd oldEmployeeAccount_1 AcceptVacationRequest

    return ()