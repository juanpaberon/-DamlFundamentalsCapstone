module Test where

import Daml.Script
import Employees
import PartiesSetUp


--Test negotiation of salary between an applicant and the employer.
test_setSalary: Script ()
test_setSalary = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    application <- submit employer do
        exerciseCmd application MakeAnOffer with salary=100.0

    application <- submit applicant do
        exerciseCmd application CounterOfferApplicant with salary=120.00

    application <- submit employer do
        exerciseCmd application MakeAnOffer with salary=110.0

    application <- submit applicant do
        exerciseCmd application AcceptOfferApplicant

    employeeAccount <- submit employer do
        exerciseCmd application ReviewApplication

    return ()

-- Auxilary function to review vacation request.
-- If there is more than 1 employees available then the
-- vacation request is accepted
reviewVacationRequest: Party -> EmployeeAccountId -> Script EmployeeAccountId
reviewVacationRequest employer accountId = do

    availableEmployees <- queryFilter @EmployeeAccount employer (\ eAccount -> not (eAccount.onVacation))
    let numAvailableEmployees = length availableEmployees

    if (numAvailableEmployees > 1) then do 
        debug $ "Request for vacations accepted"
        submit employer do
            exerciseCmd accountId AcceptVacationRequest
    else do 
        debug $ "Request for vacations denied"
        submit employer do
            exerciseCmd accountId RejectVacationRequest

-- test request for vacation by employee denied
test_resquestVacationDenied: Script ()
test_resquestVacationDenied = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    oldEmployeeAccount <- submit oldEmployee_1 do
        exerciseCmd oldEmployeeAccount RequestVacation

    oldEmployeeAccount <- reviewVacationRequest employer oldEmployeeAccount

    return ()


-- test request for vacation by employee accepted
test_resquestVacationAccepted: Script ()
test_resquestVacationAccepted = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount_1 <- setupEmployeeAccount_1 oldEmployee_1 employer
    oldEmployeeAccount_2 <- setupEmployeeAccount_2 oldEmployee_2 employer

    oldEmployeeAccount_1 <- submit oldEmployee_1 do
        exerciseCmd oldEmployeeAccount_1 RequestVacation

    oldEmployeeAccount <- reviewVacationRequest employer oldEmployeeAccount_1

    return ()


-- test firing an employee
test_multipleEmployees: Script ()
test_multipleEmployees = script do

    testParties@TestParties{applicant, oldEmployee_1, oldEmployee_2, employer} <- setupParties
    application <- setupApplication applicant employer
    oldEmployeeAccount <- setupEmployeeAccount_1 oldEmployee_1 employer

    services <- submit employer do
        createCmd EmployerServices with
            employer = employer

    submit employer do 
        exerciseCmd services FireEmployee with employee=oldEmployee_1

    return ()