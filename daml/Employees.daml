module Employees where


data PersonalInformation = PersonalInformation with
    name: Text
    lastName: Text
    education: Text
        deriving(Eq, Show)

-- Contract to record the application process of a potential new employee
type ApplicationId = ContractId NewEmployeeApplication
template NewEmployeeApplication
    with
        newApplicant: Party
        employer: Party
        positionName: Text
        salary: Numeric 2
        applicantInformation: PersonalInformation
        acceptedOfferApplicant: Bool
    where
        signatory newApplicant
        observer employer
        ensure positionName /= ""

        key (employer, newApplicant): (Party, Party)
        maintainer key._2
        
        -- The applicant can change the personal information of an application
        choice EditApplicationInformation: ApplicationId
            with
                name: Text
                lastName: Text
                education: Text
                positionName: Text
            controller newApplicant
            do
                let 
                    newPersonalInformation = PersonalInformation with
                        ..
                create this with
                    applicantInformation = newPersonalInformation

        -- Employer will make an offer (salary) to the applicant.
        -- Can be used to respond a counteroffer from the applicant.
        choice MakeAnOffer: ApplicationId
            with
                salary: Numeric 2
            controller employer
            do create this with
                salary = salary
                acceptedOfferApplicant = False

        -- applicant accepts an offer from the employer
        choice AcceptOfferApplicant: ApplicationId
            controller newApplicant
            do create this with
                acceptedOfferApplicant = True

        -- applicant makes a counter offer to the offer of the employer
        choice CounterOfferApplicant: ApplicationId
            with
                salary: Numeric 2
            controller newApplicant
            do create this with
                salary = salary
                acceptedOfferApplicant = True

        -- employer creates an employee account from the application information once
        -- the applicant has accepted the offer
        choice ReviewApplication: EmployeeAccountId
            controller employer
            do
                assertMsg "Employee has not accepted the offer" acceptedOfferApplicant
                create EmployeeAccount with
                    employee = newApplicant
                    employer = employer
                    applicantInformation = applicantInformation
                    salary = salary
                    vacationDays = 10
                    onVacation = False
                    requestedVacationTime = False


-- Contract to manage the state of employees i.e. if they on vacation or not and who they are.
type EmployeeAccountId = ContractId EmployeeAccount
template EmployeeAccount
    with
        employee: Party
        employer: Party
        salary: Numeric 2
        applicantInformation: PersonalInformation
        vacationDays: Int
        onVacation: Bool
        requestedVacationTime: Bool

    where
        signatory employer
        observer employee

        key (employer, employee): (Party, Party)
        maintainer key._1

        -- employee request vacation
        choice RequestVacation: EmployeeAccountId
            controller employee
            do create this with
                requestedVacationTime = True

        -- employer accepts the vacation request from the employee
        choice AcceptVacationRequest: EmployeeAccountId
            controller employer
            do
                assertMsg "Employee has not requested vacations" requestedVacationTime
                create this with
                    requestedVacationTime = False
                    onVacation = True

        -- employer rejects the vacation request from the employee
        choice RejectVacationRequest: EmployeeAccountId
            controller employer
            do
                assertMsg "Employee has not requested vacations" requestedVacationTime
                create this with
                    requestedVacationTime = False
                    onVacation = False

-- Contract for multiple services for the employer. Right now is only to fire employees
template EmployerServices
    with
        employer: Party
    where
        signatory employer

        -- archives an employee account
        nonconsuming choice FireEmployee: ()
            with employee: Party
            controller employer
            do
                employeeAccountCid <- fetchByKey @EmployeeAccount (employer, employee)
                archive employeeAccountCid._1 
